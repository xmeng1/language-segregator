/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ResultListSegItem } from '../model/resultListSegItem';
import { SegRequest } from '../model/segRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SegregatorControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * splitDoc
     * 
     * @param doc doc
     * @param docOptionsBlockSeparator 
     * @param docOptionsBlockSeparatorRex 
     * @param docOptionsLangList 
     * @param docOptionsSupportMapping 
     * @param docOptionsSupportTitle 
     * @param source 
     * @param titlePatternOptionsAllUpperCase 
     * @param titlePatternOptionsFilterByCase 
     * @param titlePatternOptionsFilterByLang 
     * @param titlePatternOptionsFilterByLength 
     * @param titlePatternOptionsFilterByRegex 
     * @param titlePatternOptionsLang 
     * @param titlePatternOptionsLengthThreshold 
     * @param titlePatternOptionsRegexPattern 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public splitDocUsingPOST(doc: Blob, docOptionsBlockSeparator?: 'BLANK_LINE' | 'LINE_BREAK' | 'REGEX_EXPRESS', docOptionsBlockSeparatorRex?: string, docOptionsLangList?: Array<'UNKNOWN' | 'AF' | 'AN' | 'AR' | 'BE' | 'BR' | 'CA' | 'BG' | 'BN' | 'CS' | 'CY' | 'DA' | 'DE' | 'EL' | 'EN' | 'ES' | 'ET' | 'EU' | 'FA' | 'FI' | 'FR' | 'GA' | 'GL' | 'GU' | 'HE' | 'HI' | 'HR' | 'HT' | 'HU' | 'ID' | 'IS' | 'IT' | 'JA' | 'KM' | 'KN' | 'KO' | 'LT' | 'LV' | 'MK' | 'ML' | 'MR' | 'MS' | 'MT' | 'NE' | 'NL' | 'NO' | 'OC' | 'PA' | 'PL' | 'PT' | 'RO' | 'RU' | 'SK' | 'SL' | 'SO' | 'SQ' | 'SR' | 'SV' | 'SW' | 'TA' | 'TE' | 'TH' | 'TL' | 'TR' | 'UK' | 'UR' | 'VI' | 'WA' | 'YI' | 'AST' | 'ZH_CN' | 'ZH_TW'>, docOptionsSupportMapping?: boolean, docOptionsSupportTitle?: boolean, source?: string, titlePatternOptionsAllUpperCase?: boolean, titlePatternOptionsFilterByCase?: boolean, titlePatternOptionsFilterByLang?: boolean, titlePatternOptionsFilterByLength?: boolean, titlePatternOptionsFilterByRegex?: boolean, titlePatternOptionsLang?: 'UNKNOWN' | 'AF' | 'AN' | 'AR' | 'BE' | 'BR' | 'CA' | 'BG' | 'BN' | 'CS' | 'CY' | 'DA' | 'DE' | 'EL' | 'EN' | 'ES' | 'ET' | 'EU' | 'FA' | 'FI' | 'FR' | 'GA' | 'GL' | 'GU' | 'HE' | 'HI' | 'HR' | 'HT' | 'HU' | 'ID' | 'IS' | 'IT' | 'JA' | 'KM' | 'KN' | 'KO' | 'LT' | 'LV' | 'MK' | 'ML' | 'MR' | 'MS' | 'MT' | 'NE' | 'NL' | 'NO' | 'OC' | 'PA' | 'PL' | 'PT' | 'RO' | 'RU' | 'SK' | 'SL' | 'SO' | 'SQ' | 'SR' | 'SV' | 'SW' | 'TA' | 'TE' | 'TH' | 'TL' | 'TR' | 'UK' | 'UR' | 'VI' | 'WA' | 'YI' | 'AST' | 'ZH_CN' | 'ZH_TW', titlePatternOptionsLengthThreshold?: number, titlePatternOptionsRegexPattern?: string, observe?: 'body', reportProgress?: boolean): Observable<ResultListSegItem>;
    public splitDocUsingPOST(doc: Blob, docOptionsBlockSeparator?: 'BLANK_LINE' | 'LINE_BREAK' | 'REGEX_EXPRESS', docOptionsBlockSeparatorRex?: string, docOptionsLangList?: Array<'UNKNOWN' | 'AF' | 'AN' | 'AR' | 'BE' | 'BR' | 'CA' | 'BG' | 'BN' | 'CS' | 'CY' | 'DA' | 'DE' | 'EL' | 'EN' | 'ES' | 'ET' | 'EU' | 'FA' | 'FI' | 'FR' | 'GA' | 'GL' | 'GU' | 'HE' | 'HI' | 'HR' | 'HT' | 'HU' | 'ID' | 'IS' | 'IT' | 'JA' | 'KM' | 'KN' | 'KO' | 'LT' | 'LV' | 'MK' | 'ML' | 'MR' | 'MS' | 'MT' | 'NE' | 'NL' | 'NO' | 'OC' | 'PA' | 'PL' | 'PT' | 'RO' | 'RU' | 'SK' | 'SL' | 'SO' | 'SQ' | 'SR' | 'SV' | 'SW' | 'TA' | 'TE' | 'TH' | 'TL' | 'TR' | 'UK' | 'UR' | 'VI' | 'WA' | 'YI' | 'AST' | 'ZH_CN' | 'ZH_TW'>, docOptionsSupportMapping?: boolean, docOptionsSupportTitle?: boolean, source?: string, titlePatternOptionsAllUpperCase?: boolean, titlePatternOptionsFilterByCase?: boolean, titlePatternOptionsFilterByLang?: boolean, titlePatternOptionsFilterByLength?: boolean, titlePatternOptionsFilterByRegex?: boolean, titlePatternOptionsLang?: 'UNKNOWN' | 'AF' | 'AN' | 'AR' | 'BE' | 'BR' | 'CA' | 'BG' | 'BN' | 'CS' | 'CY' | 'DA' | 'DE' | 'EL' | 'EN' | 'ES' | 'ET' | 'EU' | 'FA' | 'FI' | 'FR' | 'GA' | 'GL' | 'GU' | 'HE' | 'HI' | 'HR' | 'HT' | 'HU' | 'ID' | 'IS' | 'IT' | 'JA' | 'KM' | 'KN' | 'KO' | 'LT' | 'LV' | 'MK' | 'ML' | 'MR' | 'MS' | 'MT' | 'NE' | 'NL' | 'NO' | 'OC' | 'PA' | 'PL' | 'PT' | 'RO' | 'RU' | 'SK' | 'SL' | 'SO' | 'SQ' | 'SR' | 'SV' | 'SW' | 'TA' | 'TE' | 'TH' | 'TL' | 'TR' | 'UK' | 'UR' | 'VI' | 'WA' | 'YI' | 'AST' | 'ZH_CN' | 'ZH_TW', titlePatternOptionsLengthThreshold?: number, titlePatternOptionsRegexPattern?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResultListSegItem>>;
    public splitDocUsingPOST(doc: Blob, docOptionsBlockSeparator?: 'BLANK_LINE' | 'LINE_BREAK' | 'REGEX_EXPRESS', docOptionsBlockSeparatorRex?: string, docOptionsLangList?: Array<'UNKNOWN' | 'AF' | 'AN' | 'AR' | 'BE' | 'BR' | 'CA' | 'BG' | 'BN' | 'CS' | 'CY' | 'DA' | 'DE' | 'EL' | 'EN' | 'ES' | 'ET' | 'EU' | 'FA' | 'FI' | 'FR' | 'GA' | 'GL' | 'GU' | 'HE' | 'HI' | 'HR' | 'HT' | 'HU' | 'ID' | 'IS' | 'IT' | 'JA' | 'KM' | 'KN' | 'KO' | 'LT' | 'LV' | 'MK' | 'ML' | 'MR' | 'MS' | 'MT' | 'NE' | 'NL' | 'NO' | 'OC' | 'PA' | 'PL' | 'PT' | 'RO' | 'RU' | 'SK' | 'SL' | 'SO' | 'SQ' | 'SR' | 'SV' | 'SW' | 'TA' | 'TE' | 'TH' | 'TL' | 'TR' | 'UK' | 'UR' | 'VI' | 'WA' | 'YI' | 'AST' | 'ZH_CN' | 'ZH_TW'>, docOptionsSupportMapping?: boolean, docOptionsSupportTitle?: boolean, source?: string, titlePatternOptionsAllUpperCase?: boolean, titlePatternOptionsFilterByCase?: boolean, titlePatternOptionsFilterByLang?: boolean, titlePatternOptionsFilterByLength?: boolean, titlePatternOptionsFilterByRegex?: boolean, titlePatternOptionsLang?: 'UNKNOWN' | 'AF' | 'AN' | 'AR' | 'BE' | 'BR' | 'CA' | 'BG' | 'BN' | 'CS' | 'CY' | 'DA' | 'DE' | 'EL' | 'EN' | 'ES' | 'ET' | 'EU' | 'FA' | 'FI' | 'FR' | 'GA' | 'GL' | 'GU' | 'HE' | 'HI' | 'HR' | 'HT' | 'HU' | 'ID' | 'IS' | 'IT' | 'JA' | 'KM' | 'KN' | 'KO' | 'LT' | 'LV' | 'MK' | 'ML' | 'MR' | 'MS' | 'MT' | 'NE' | 'NL' | 'NO' | 'OC' | 'PA' | 'PL' | 'PT' | 'RO' | 'RU' | 'SK' | 'SL' | 'SO' | 'SQ' | 'SR' | 'SV' | 'SW' | 'TA' | 'TE' | 'TH' | 'TL' | 'TR' | 'UK' | 'UR' | 'VI' | 'WA' | 'YI' | 'AST' | 'ZH_CN' | 'ZH_TW', titlePatternOptionsLengthThreshold?: number, titlePatternOptionsRegexPattern?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResultListSegItem>>;
    public splitDocUsingPOST(doc: Blob, docOptionsBlockSeparator?: 'BLANK_LINE' | 'LINE_BREAK' | 'REGEX_EXPRESS', docOptionsBlockSeparatorRex?: string, docOptionsLangList?: Array<'UNKNOWN' | 'AF' | 'AN' | 'AR' | 'BE' | 'BR' | 'CA' | 'BG' | 'BN' | 'CS' | 'CY' | 'DA' | 'DE' | 'EL' | 'EN' | 'ES' | 'ET' | 'EU' | 'FA' | 'FI' | 'FR' | 'GA' | 'GL' | 'GU' | 'HE' | 'HI' | 'HR' | 'HT' | 'HU' | 'ID' | 'IS' | 'IT' | 'JA' | 'KM' | 'KN' | 'KO' | 'LT' | 'LV' | 'MK' | 'ML' | 'MR' | 'MS' | 'MT' | 'NE' | 'NL' | 'NO' | 'OC' | 'PA' | 'PL' | 'PT' | 'RO' | 'RU' | 'SK' | 'SL' | 'SO' | 'SQ' | 'SR' | 'SV' | 'SW' | 'TA' | 'TE' | 'TH' | 'TL' | 'TR' | 'UK' | 'UR' | 'VI' | 'WA' | 'YI' | 'AST' | 'ZH_CN' | 'ZH_TW'>, docOptionsSupportMapping?: boolean, docOptionsSupportTitle?: boolean, source?: string, titlePatternOptionsAllUpperCase?: boolean, titlePatternOptionsFilterByCase?: boolean, titlePatternOptionsFilterByLang?: boolean, titlePatternOptionsFilterByLength?: boolean, titlePatternOptionsFilterByRegex?: boolean, titlePatternOptionsLang?: 'UNKNOWN' | 'AF' | 'AN' | 'AR' | 'BE' | 'BR' | 'CA' | 'BG' | 'BN' | 'CS' | 'CY' | 'DA' | 'DE' | 'EL' | 'EN' | 'ES' | 'ET' | 'EU' | 'FA' | 'FI' | 'FR' | 'GA' | 'GL' | 'GU' | 'HE' | 'HI' | 'HR' | 'HT' | 'HU' | 'ID' | 'IS' | 'IT' | 'JA' | 'KM' | 'KN' | 'KO' | 'LT' | 'LV' | 'MK' | 'ML' | 'MR' | 'MS' | 'MT' | 'NE' | 'NL' | 'NO' | 'OC' | 'PA' | 'PL' | 'PT' | 'RO' | 'RU' | 'SK' | 'SL' | 'SO' | 'SQ' | 'SR' | 'SV' | 'SW' | 'TA' | 'TE' | 'TH' | 'TL' | 'TR' | 'UK' | 'UR' | 'VI' | 'WA' | 'YI' | 'AST' | 'ZH_CN' | 'ZH_TW', titlePatternOptionsLengthThreshold?: number, titlePatternOptionsRegexPattern?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (doc === null || doc === undefined) {
            throw new Error('Required parameter doc was null or undefined when calling splitDocUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (docOptionsBlockSeparator !== undefined && docOptionsBlockSeparator !== null) {
            queryParameters = queryParameters.set('docOptions.blockSeparator', <any>docOptionsBlockSeparator);
        }
        if (docOptionsBlockSeparatorRex !== undefined && docOptionsBlockSeparatorRex !== null) {
            queryParameters = queryParameters.set('docOptions.blockSeparatorRex', <any>docOptionsBlockSeparatorRex);
        }
        if (docOptionsLangList) {
            docOptionsLangList.forEach((element) => {
                queryParameters = queryParameters.append('docOptions.langList', <any>element);
            })
        }
        if (docOptionsSupportMapping !== undefined && docOptionsSupportMapping !== null) {
            queryParameters = queryParameters.set('docOptions.supportMapping', <any>docOptionsSupportMapping);
        }
        if (docOptionsSupportTitle !== undefined && docOptionsSupportTitle !== null) {
            queryParameters = queryParameters.set('docOptions.supportTitle', <any>docOptionsSupportTitle);
        }
        if (source !== undefined && source !== null) {
            queryParameters = queryParameters.set('source', <any>source);
        }
        if (titlePatternOptionsAllUpperCase !== undefined && titlePatternOptionsAllUpperCase !== null) {
            queryParameters = queryParameters.set('titlePatternOptions.allUpperCase', <any>titlePatternOptionsAllUpperCase);
        }
        if (titlePatternOptionsFilterByCase !== undefined && titlePatternOptionsFilterByCase !== null) {
            queryParameters = queryParameters.set('titlePatternOptions.filterByCase', <any>titlePatternOptionsFilterByCase);
        }
        if (titlePatternOptionsFilterByLang !== undefined && titlePatternOptionsFilterByLang !== null) {
            queryParameters = queryParameters.set('titlePatternOptions.filterByLang', <any>titlePatternOptionsFilterByLang);
        }
        if (titlePatternOptionsFilterByLength !== undefined && titlePatternOptionsFilterByLength !== null) {
            queryParameters = queryParameters.set('titlePatternOptions.filterByLength', <any>titlePatternOptionsFilterByLength);
        }
        if (titlePatternOptionsFilterByRegex !== undefined && titlePatternOptionsFilterByRegex !== null) {
            queryParameters = queryParameters.set('titlePatternOptions.filterByRegex', <any>titlePatternOptionsFilterByRegex);
        }
        if (titlePatternOptionsLang !== undefined && titlePatternOptionsLang !== null) {
            queryParameters = queryParameters.set('titlePatternOptions.lang', <any>titlePatternOptionsLang);
        }
        if (titlePatternOptionsLengthThreshold !== undefined && titlePatternOptionsLengthThreshold !== null) {
            queryParameters = queryParameters.set('titlePatternOptions.lengthThreshold', <any>titlePatternOptionsLengthThreshold);
        }
        if (titlePatternOptionsRegexPattern !== undefined && titlePatternOptionsRegexPattern !== null) {
            queryParameters = queryParameters.set('titlePatternOptions.regexPattern', <any>titlePatternOptionsRegexPattern);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (doc !== undefined) {
            formParams = formParams.append('doc', <any>doc) || formParams;
        }

        return this.httpClient.post<ResultListSegItem>(`${this.configuration.basePath}/api/v1/splitDoc`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * splitString
     * 
     * @param segRequest segRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public splitStringUsingPOST(segRequest: SegRequest, observe?: 'body', reportProgress?: boolean): Observable<ResultListSegItem>;
    public splitStringUsingPOST(segRequest: SegRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResultListSegItem>>;
    public splitStringUsingPOST(segRequest: SegRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResultListSegItem>>;
    public splitStringUsingPOST(segRequest: SegRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (segRequest === null || segRequest === undefined) {
            throw new Error('Required parameter segRequest was null or undefined when calling splitStringUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json;charset=UTF-8'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResultListSegItem>(`${this.configuration.basePath}/api/v1/split`,
            segRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
