/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class OperationHandlerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * handle
     * 
     * @param requestBody body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public handleUsingGET(requestBody?: { [key: string]: string; }, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public handleUsingGET(requestBody?: { [key: string]: string; }, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public handleUsingGET(requestBody?: { [key: string]: string; }, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public handleUsingGET(requestBody?: { [key: string]: string; }, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/vnd.spring-boot.actuator.v2+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return null;
        // return this.httpClient.get<any>(`${this.configuration.basePath}/actuator/health/${encodeURIComponent(String('component'))}/${encodeURIComponent(String('instance'))}`,
        //     {
        //         withCredentials: this.configuration.withCredentials,
        //         headers: headers,
        //         observe: observe,
        //         reportProgress: reportProgress
        //     }
        // );
    }

    /**
     * handle
     * 
     * @param requestBody body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public handleUsingGET1(requestBody?: { [key: string]: string; }, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public handleUsingGET1(requestBody?: { [key: string]: string; }, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public handleUsingGET1(requestBody?: { [key: string]: string; }, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public handleUsingGET1(requestBody?: { [key: string]: string; }, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/vnd.spring-boot.actuator.v2+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        return null;
        // return this.httpClient.get<any>(`${this.configuration.basePath}/actuator/health/${encodeURIComponent(String(component))}`,
        //     {
        //         withCredentials: this.configuration.withCredentials,
        //         headers: headers,
        //         observe: observe,
        //         reportProgress: reportProgress
        //     }
        // );
    }

    /**
     * handle
     * 
     * @param requestBody body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public handleUsingGET2(requestBody?: { [key: string]: string; }, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public handleUsingGET2(requestBody?: { [key: string]: string; }, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public handleUsingGET2(requestBody?: { [key: string]: string; }, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public handleUsingGET2(requestBody?: { [key: string]: string; }, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/vnd.spring-boot.actuator.v2+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/actuator/health`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * handle
     * 
     * @param requestBody body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public handleUsingGET3(requestBody?: { [key: string]: string; }, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public handleUsingGET3(requestBody?: { [key: string]: string; }, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public handleUsingGET3(requestBody?: { [key: string]: string; }, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public handleUsingGET3(requestBody?: { [key: string]: string; }, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/vnd.spring-boot.actuator.v2+json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.get<any>(`${this.configuration.basePath}/actuator/info`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
